(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{389:function(t,e,a){t.exports=a.p+"assets/img/03_DataFrame.4b66a892.jpg"},390:function(t,e,a){t.exports=a.p+"assets/img/03_TCPIP.f577c90d.jpg"},391:function(t,e,a){t.exports=a.p+"assets/img/03_HTTP.4bb22c92.png"},434:function(t,e,a){"use strict";a.r(e);var r=a(31),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"网络"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网络"}},[t._v("#")]),t._v(" 网络")]),t._v(" "),r("h2",{attrs:{id:"网络请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网络请求"}},[t._v("#")]),t._v(" 网络请求")]),t._v(" "),r("h3",{attrs:{id:"发起网络请求的方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#发起网络请求的方式"}},[t._v("#")]),t._v(" 发起网络请求的方式")]),t._v(" "),r("h2",{attrs:{id:"网络错误"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网络错误"}},[t._v("#")]),t._v(" 网络错误")]),t._v(" "),r("ul",[r("li",[t._v("3xx （重定向）")]),t._v(" "),r("li",[t._v("400 （错误请求） 服务器不理解请求的语法。（解决办法传参格式不正确）")]),t._v(" "),r("li",[t._v("401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应")]),t._v(" "),r("li",[t._v("5xx （服务器错误）找后端同学就行")])]),t._v(" "),r("h2",{attrs:{id:"网络类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网络类型"}},[t._v("#")]),t._v(" 网络类型")]),t._v(" "),r("h2",{attrs:{id:"抓包工具"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抓包工具"}},[t._v("#")]),t._v(" 抓包工具")]),t._v(" "),r("p",[t._v("Wireshark (傻瓜式)")]),t._v(" "),r("ul",[r("li",[t._v("下载安装")]),t._v(" "),r("li",[t._v("选择网关")]),t._v(" "),r("li",[t._v("设置 host 过滤器\n"),r("blockquote",[r("p",[t._v("(ip.addr == 127.0.0.1 or ip.addr ==192.168.30.200) and (http or http2 or http3)")]),t._v(" "),r("p",[t._v("ip.addr == 本地 IP 或者目标 IP")]),t._v(" "),r("p",[t._v("可查看本地 node 服务的网络请求，非常好用，非常傻瓜")])])])]),t._v(" "),r("h2",{attrs:{id:"解决思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解决思路"}},[t._v("#")]),t._v(" 解决思路")]),t._v(" "),r("ul",[r("li",[t._v("网络请求是否准确\n"),r("ul",[r("li",[t._v("host（http/https、地址、端口号）")]),t._v(" "),r("li",[t._v("API （拼写、大小写、接口更新未及时同步、自动拼接时多余的‘/’）")]),t._v(" "),r("li",[t._v("method （POST/GET）")]),t._v(" "),r("li",[t._v("参数 （参数类型 json/form-data、参数数据结构、必填参数缺失、参数对应不上/拼写错误）")]),t._v(" "),r("li",[t._v("header （参数不支持中文，请求会直接报错，network 都看不到请求信息，可通过编码解决）")])])]),t._v(" "),r("li",[t._v("请求是否成功发送\n"),r("ul",[r("li",[t._v("网页发送状态")]),t._v(" "),r("li",[t._v("node 服务接收网页请求")]),t._v(" "),r("li",[t._v("node 服务处理请求")]),t._v(" "),r("li",[t._v("node 服务发送请求到后端服务")])])]),t._v(" "),r("li",[t._v("请求是否成功返回\n"),r("ul",[r("li",[t._v("node 服务接收后端服务返回")]),t._v(" "),r("li",[t._v("node 服务处理返回数据")]),t._v(" "),r("li",[t._v("node 服务返回数据到网页")])])]),t._v(" "),r("li",[t._v("返回数据结构是否准确")])]),t._v(" "),r("h2",{attrs:{id:"edas-node-egg-proxy-400"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#edas-node-egg-proxy-400"}},[t._v("#")]),t._v(" edas node egg proxy 400")]),t._v(" "),r("p",[t._v("应用通过 egg 代理直接访问 java 服务，是 OK 的；通过 getaway 服务范围 Java 服务报错 400")]),t._v(" "),r("ul",[r("li",[t._v("服务之间网络请求是通畅的")])]),t._v(" "),r("h2",{attrs:{id:"网络请求-header-限制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网络请求-header-限制"}},[t._v("#")]),t._v(" 网络请求 Header 限制")]),t._v(" "),r("p",[t._v("value 值不能有中文\n一个请求头由名称（不区分大小写）后跟一个冒号“：”，冒号后跟具体的值（不带换行符）组成。该值前面的引导空白会被忽略。")]),t._v(" "),r("h2",{attrs:{id:"js-编码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#js-编码"}},[t._v("#")]),t._v(" JS 编码")]),t._v(" "),r("ul",[r("li",[t._v("encodeURIComponent() decodeURIComponent()")]),t._v(" "),r("li",[t._v("encodeURI() decodeURI()")]),t._v(" "),r("li",[t._v("secape() unescape()")])]),t._v(" "),r("h2",{attrs:{id:"爬坑"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#爬坑"}},[t._v("#")]),t._v(" 爬坑")]),t._v(" "),r("h3",{attrs:{id:""}},[r("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('"{\\"error_code\\":500,\\"error_desc\\":\\"Error: getaddrinfo ENOTFOUND health100-standard-platform-svc health100-standard-platform-svc:8080\\",\\"detail\\":\\"RequestError: Error: getaddrinfo ENOTFOUND health100-standard-platform-svc health100-standard-platform-svc:8080\\\\n    at new RequestError (/usr/src/app/node_modules/request-promise-core/lib/errors.js:14:15)\\\\n    at Request.plumbing.callback (/usr/src/app/node_modules/request-promise-core/lib/plumbing.js:87:29)\\\\n    at Request.RP$callback [as _callback] (/usr/src/app/node_modules/request-promise-core/lib/plumbing.js:46:31)\\\\n    at self.callback (/usr/src/app/node_modules/request/request.js:185:22)\\\\n    at Request.emit (events.js:189:13)\\\\n    at Request.onRequestError (/usr/src/app/node_modules/request/request.js:877:8)\\\\n    at ClientRequest.emit (events.js:189:13)\\\\n    at Socket.socketErrorListener (_http_client.js:392:9)\\\\n    at Socket.emit (events.js:189:13)\\\\n    at emitErrorNT (internal/streams/destroy.js:82:8)\\",\\"result_code\\":\\"FAIL\\",\\"data\\":null}"\n\n{\n  error_code: 500,\n  error_desc:Error: getaddrinfo ENOTFOUND health100-standard-platform-svc health100-standard-platform-svc: 8080,\n  detail:RequestError: Error: getaddrinfo ENOTFOUND health100-standard-platform-svc health100-standard-platform-svc: 8080\n   at new RequestError (/usr/src/app/node_modules/request-promise-core/lib/errors.js: 14: 15)\n   at Request.plumbing.callback (/usr/src/app/node_modules/request-promise-core/lib/plumbing.js: 87: 29)\n   at Request.RP$callback [as _callback] (/usr/src/app/node_modules/request-promise-core/lib/plumbing.js: 46: 31)\n   at self.callback (/usr/src/app/node_modules/request/request.js: 185: 22)\n   at Request.emit (events.js: 189: 13)\n   at Request.onRequestError (/usr/src/app/node_modules/request/request.js: 877: 8)\n   at ClientRequest.emit (events.js: 189: 13)\n   at Socket.socketErrorListener (_http_client.js: 392: 9)\n   at Socket.emit (events.js: 189: 13)\n   at emitErrorNT (internal/streams/destroy.js: 82: 8),\n  result_code:FAIL,\n  data: null\n}\n')])])]),r("h2",{attrs:{id:"同源-同站"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#同源-同站"}},[t._v("#")]),t._v(" 同源&同站")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("源（origin）= 协议（scheme）+ 主机名（hostname）+ 端口号（port）\n")])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("站（site）= eTLD+1 (不看协议、端口、子域名)\n")])])]),r("ul",[r("li",[t._v("TLD (表示顶级域名，例如 .com、.org、.cn 等等)")]),t._v(" "),r("li",[t._v("TLD+1 (表示顶级域名和它前面二级域名的组合， 例如: https://www.example.com )")]),t._v(" "),r("li",[t._v("eTLD（有效顶级域名，由 Mozilla 维护在公共后缀列表（Public Suffix List）中，例如:.io、.com.cn）")]),t._v(" "),r("li",[t._v("eTLD+1 (有效顶级域名和它前面二级域名的组合， 例如: https://www.example.com.cn )")])]),t._v(" "),r("h2",{attrs:{id:"referer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#referer"}},[t._v("#")]),t._v(" Referer")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("请求头包含了当前请求页面的来源页面的地址，即表示当前页面是通过此来源页面里的链接进入的。服务端一般使用 Referer 请求头识别访问来源，可能会以此进行统计分析、日志记录以及缓存优化等。\n")])])]),r("p",[t._v("在以下两种情况下，Referer 不会被发送：")]),t._v(" "),r("ul",[r("li",[t._v('来源页面采用的协议为表示本地文件的 "file" 或者 "data" URI；')]),t._v(" "),r("li",[t._v("当前请求页面采用的是非安全协议，而来源页面采用的是安全协议（HTTPS）。")])]),t._v(" "),r("h2",{attrs:{id:"origin"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#origin"}},[t._v("#")]),t._v(" Origin")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("请求首部字段 Origin 指示了请求来自于哪个站点。该字段仅指示服务器名称，并不包含任何路径信息。该首部用于 CORS 请求或者 POST 请求。除了不包含路径信息，该字段与 Referer 首部字段相似。\n")])])]),r("p",[t._v('同源请求：POST、OPTIONS、PUT、PATCH 和 DELETE 请求都会添加 Origin 请求头，GET 或 HEAD 请求不会添加 Origin 请求头。\n跨域请求：所有跨域请求(CORS)都会添加 Origin 请求头。\n来源页面采用的协议为表示本地文件的 "file" 或者 "data" URI, origin:null')]),t._v(" "),r("h2",{attrs:{id:"httponly"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#httponly"}},[t._v("#")]),t._v(" httpOnly")]),t._v(" "),r("h2",{attrs:{id:"content-security-policy-csp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#content-security-policy-csp"}},[t._v("#")]),t._v(" Content-Security-Policy(CSP)")]),t._v(" "),r("p",[t._v("内容异常时，会阻断页面；浏览器支持不完整（ie10，只支持 sandbox）\n一个 HTTP response header，或")]),r("meta"),t._v("\n指定页面可加载的资源，default-src，font-src，frame-src，img-src，script-src，media-src，style-src 'self' 'unsafe-inline' url\nreport-uri uri 上报接口"),r("p"),t._v(" "),r("h2",{attrs:{id:"content-security-content-security-policy-report-only"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#content-security-content-security-policy-report-only"}},[t._v("#")]),t._v(" Content-Security-Content-Security-Policy-Report-Only")]),t._v(" "),r("p",[t._v("不阻断页面，只是会提交异常内容，")]),t._v(" "),r("h2",{attrs:{id:"tcp-ip"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip"}},[t._v("#")]),t._v(" TCP/IP")]),t._v(" "),r("ol",[r("li",[t._v("应用层（HTTP、FTP、Telnet、DNS、SMTP）")]),t._v(" "),r("li",[t._v("传输层（TCP、UDP）"),r("RouterLink",{attrs:{to:"/",title:"Max Segment Size"}},[t._v("MSS")])],1),t._v(" "),r("li",[t._v("网络层（IP）"),r("RouterLink",{attrs:{to:"/",title:"Maximum Transmission Unit"}},[t._v("MTU")]),t._v(" 子网掩码 网络号、主机号")],1),t._v(" "),r("li",[t._v("网络接口层 数据帧（Data frame）\n"),r("img",{attrs:{src:a(389),alt:"数据分段分片"}}),t._v(" "),r("img",{attrs:{src:a(390),alt:"TCP/IP"}})])]),t._v(" "),r("h2",{attrs:{id:"http"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),r("p",[r("img",{attrs:{src:a(391),alt:"HTTP图解"}})]),t._v(" "),r("h2",{attrs:{id:"http-1-x"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-1-x"}},[t._v("#")]),t._v(" HTTP 1.x")]),t._v(" "),r("h2",{attrs:{id:"https"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),r("h2",{attrs:{id:"http-2-0"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-2-0"}},[t._v("#")]),t._v(" HTTP 2.0")]),t._v(" "),r("h3",{attrs:{id:"-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[t._v("#")])]),t._v(" "),r("h2",{attrs:{id:"http-3-0"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-3-0"}},[t._v("#")]),t._v(" HTTP 3.0")]),t._v(" "),r("h3",{attrs:{id:"tls"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tls"}},[t._v("#")]),t._v(" "),r("RouterLink",{attrs:{to:"/",title:"Transmission Control Protocol"}},[t._v("TLS")])],1),t._v(" "),r("h3",{attrs:{id:"quic"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#quic"}},[t._v("#")]),t._v(" "),r("RouterLink",{attrs:{to:"/",title:"quick udp internet connection"}},[t._v("QUIC")])],1),t._v(" "),r("p",[t._v("通用、安全、多路复用的传输层新型网络协议，类似于在 UDP 上实现的 TCP + TLS + HTTP/2，")]),t._v(" "),r("h3",{attrs:{id:"udp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[t._v("#")]),t._v(" UDP")]),t._v(" "),r("ul",[r("li",[t._v("支持一对一，一对多，多对一和多对多的交互通信")]),t._v(" "),r("li",[t._v("无连接")]),t._v(" "),r("li",[t._v("可靠性存在缺陷")]),t._v(" "),r("li",[t._v("一个包一个包的发送，是有边界的，但可能会丢包和乱序。")]),t._v(" "),r("li",[t._v("低数据量传输速度较 TCP 快 14%，超过 1M 数据快不了多少")]),t._v(" "),r("li",[t._v("应用：包总量较少的通信，如 DNS 、SNMP 等；视频、音频等多媒体通信；广播通信；")])])])}),[],!1,null,null,null);e.default=s.exports}}]);